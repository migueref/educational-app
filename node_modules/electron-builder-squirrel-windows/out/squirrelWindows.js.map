{"version":3,"file":"squirrelWindows.js","sourceRoot":"","sources":["../src/squirrelWindows.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, getArchSuffix, Target } from \"electron-builder\"\nimport { log, warn } from \"builder-util\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { SquirrelWindowsOptions } from \"electron-builder/out/options/winOptions\"\nimport { WinPackager } from \"electron-builder/out/winPackager\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { buildInstaller, convertVersion, SquirrelOptions } from \"./squirrelPack\"\n\nconst SW_VERSION = \"1.6.0.0\"\n//noinspection SpellCheckingInspection\nconst SW_SHA2 = \"ipd/ZQXyCe2+CYmNiUa9+nzVuO2PsRfF6DT8Y2mbIzkc8SVH8tJ6uS4rdhwAI1rPsYkmsPe1AcJGqv8ZDZcFww==\"\n\nexport default class SquirrelWindowsTarget extends Target {\n  readonly options: SquirrelWindowsOptions = {...this.packager.platformSpecificBuildOptions, ...this.packager.config.squirrelWindows}\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"squirrel\")\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    log(`Building Squirrel.Windows for arch ${Arch[arch]}`)\n\n    if (arch === Arch.ia32) {\n      warn(\"For windows consider only distributing 64-bit or use nsis target, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const version = appInfo.version\n    const archSuffix = getArchSuffix(arch)\n\n    const sanitizedName = sanitizeFileName(this.appName)\n\n    // tslint:disable-next-line:no-invalid-template-strings\n    const setupFile = packager.expandArtifactNamePattern(this.options, \"exe\", arch, \"${productName} Setup ${version}.${ext}\")\n    const packageFile = `${sanitizedName}-${version}-full.nupkg`\n\n    const installerOutDir = path.join(this.outDir, `win${getArchSuffix(arch)}`)\n    const distOptions = await this.computeEffectiveDistOptions()\n    await buildInstaller(distOptions as SquirrelOptions, installerOutDir, {setupFile, packageFile}, packager, appOutDir, this.outDir, arch)\n    packager.dispatchArtifactCreated(path.join(installerOutDir, setupFile), this, arch, `${sanitizedName}-Setup-${version}${archSuffix}.exe`)\n\n    const packagePrefix = `${this.appName}-${convertVersion(version)}-`\n    packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`), this, arch)\n    if (distOptions.remoteReleases != null) {\n      packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`), this, arch)\n    }\n\n    packager.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"), this, arch)\n  }\n\n  private get appName() {\n    return this.options.name || this.packager.appInfo.name\n  }\n\n  async computeEffectiveDistOptions(): Promise<SquirrelOptions> {\n    const packager = this.packager\n    let iconUrl = this.options.iconUrl\n    if (iconUrl == null) {\n      const info = await packager.info.repositoryInfo\n      if (info != null) {\n        iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.relativeBuildResourcesDirname}/icon.ico?raw=true`\n      }\n\n      if (iconUrl == null) {\n        throw new Error(\"iconUrl is not specified, please see https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(this.options)\n\n    const appInfo = packager.appInfo\n    const projectUrl = await appInfo.computePackageUrl()\n    const appName = this.appName\n    const options: SquirrelOptions = {\n      name: appName,\n      productName: this.options.name || appInfo.productName,\n      appId: this.options.useAppIdAsId ? appInfo.id : appName,\n      version: appInfo.version,\n      description: appInfo.description,\n      // better to explicitly set to empty string, to avoid any nugget errors\n      authors: appInfo.companyName || \"\",\n      iconUrl,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: appInfo.copyright,\n      packageCompressionLevel: parseInt((process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL || packager.config.compression === \"store\" ? 0 : 9) as any, 10),\n      vendorPath: await getBinFromGithub(\"Squirrel.Windows\", SW_VERSION, SW_SHA2),\n      ...this.options as any,\n    }\n\n    if (options.remoteToken == null) {\n      options.remoteToken = process.env.GH_TOKEN\n    }\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    if (this.options.remoteReleases === true) {\n      const info = await packager.info.repositoryInfo\n      if (info == null) {\n        warn(\"remoteReleases set to true, but cannot get repository info\")\n      }\n      else {\n        options.remoteReleases = `https://github.com/${info.user}/${info.project}`\n        log(`remoteReleases is set to ${options.remoteReleases}`)\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (const name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new Error(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}"]}
